name: Build modify Release

on:
  schedule:
    - cron: '0 * * * *' 
  workflow_dispatch:

jobs:
  check-latest-tag:
    runs-on: ubuntu-latest

    env:
      SOURCE_URL: https://github.com/LiterMC/go-openbmclapi

    outputs:
      new_tag_found: ${{ steps.check_tag_version.outputs.new_tag_found }}
      latest_tag: ${{ steps.check_tag_version.outputs.latest_tag }}

    steps:
    - name: Get latest tag from go-openbmclapi
      id: get_latest_tag
      run: |
        LATEST_TAG=$(git ls-remote --tags ${{ env.SOURCE_URL }} | grep -o 'refs/tags/.*' | sed 's/refs\/tags\///' | sort -V | tail -n1)
        echo "::set-output name=latest_tag::$LATEST_TAG"

    - name: Get current tag
      id: get_current_tag
      uses: actions/github-script@v7
      with:
        script: |
          const latestTag = await github.rest.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          core.setOutput('current_tag', latestTag.data.tag_name);

    - name: Check tag version
      id: check_tag_version
      run: |
        CURRENT_TAG=${{ steps.get_current_tag.outputs.current_tag }}
        LATEST_TAG=${{ steps.get_latest_tag.outputs.latest_tag }}
        if [ "$LATEST_TAG" != "$CURRENT_TAG" ]; then
          echo "::set-output name=new_tag_found::true"
          echo "::set-output name=latest_tag::$LATEST_TAG"
        else
          echo "::set-output name=new_tag_found::false"

  build-with-latest-source:
    runs-on: ubuntu-latest
    if: needs.check-latest-tag.outputs.new_tag_found == 'true'

    env:
      SOURCE_URL: https://github.com/LiterMC/go-openbmclapi
      LOCAL_REPO: ./go-openbmclapi
      LATEST_TAG: ${{ needs.check-latest-tag.outputs.latest_tag }}

    steps:
    - name: Checkout patch file
        uses: actions/checkout@v4

    - name: Clone source with tags
      id: clone_source
      run: |
        git clone --branch ${{ env.LATEST_TAG }} ${{ env.SOURCE_URL }} ${{ env.LOCAL_REPO }} 

    # - name: Patch for disable mount check
    #   id: disable_check
    #   run: |
    #     PATCH_PATH="${{ env.LOCAL_REPO }}/sync.go"
    #     TARGET_CODE=$(cat ./target_code)
    #     PATCH_CODE=$(cat ./patch_code)
    #     TEMP_FILE=$(mktemp)

    #     while IFS= read -r code
    #     do
    #         if [[ "$code" == *"$TARGET_CODE"* ]]; then
    #             echo "$PATCH_CODE" >> "$TEMP_FILE"
    #             PATCH_SUCCESS="true"
    #         fi
    #         echo "$code" >> "$TEMP_FILE"
    #     done < "$PATCH_PATH"

    #     if [ -n "$PATCH_SUCCESS" ]; then
    #         mv "$PATCH_PATH" "$PATCH_PATH.bak"
    #         mv "$TEMP_FILE" "$PATCH_PATH"
    #     else
    #         rm "$TEMP_FILE"
    #         exit 1
    #     fi

    - name: Setup Golang
      uses: actions/setup-go@v5
      with:
        go-version-file: ${{ env.LOCAL_REPO }}/go.mod
        cache-dependency-path: ${{ env.LOCAL_REPO }}/go.sum

    - name: Create archives
      run: |
        TAR_FILE="source.tar.gz"
        ZIP_FILE="source.zip"

        tar -czvf $TAR_FILE ${{ env.LOCAL_REPO }}

        zip -r $ZIP_FILE ${{ env.LOCAL_REPO }}

    - name: Build modify Release
      id: build_release
      run: |
        cd ${{ env.LOCAL_REPO }}
        go generate .

        outputdir="output"
        mkdir -p "$outputdir"

        available_platforms=(
          darwin/amd64 darwin/arm64
          linux/386 linux/amd64 linux/arm linux/arm64
          windows/386 windows/amd64 windows/arm windows/arm64
        )

        ldflags="-X 'github.com/LiterMC/go-openbmclapi/internal/build.BuildVersion=${{ env.LATEST_TAG }}-mod'"
        for p in "${available_platforms[@]}"; do
          os=${p%/*}
          arch=${p#*/}
          target="${outputdir}/go-openbmclapi-${os}-${arch} -s -w"
          if [[ "$os" == "windows" ]]; then
            target="${target}.exe"
          fi
          echo "Building $target ..."
          GOOS=$os GOARCH=$arch go build -o "$target" -ldflags "$ldflags" . || exit $?
        done

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ env.LATEST_TAG }}
        tag_name: ${{ env.LATEST_TAG }}
        files: |
          source.tar.gz
          source.zip
          ${{ env.LOCAL_REPO }}/output/*
